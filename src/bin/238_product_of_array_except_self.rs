pub struct Solution {}

impl Solution {

    pub fn product_except_self(nums: Vec<i32>) -> Vec<i32> {
        let mut result: Vec<i32> = vec![0; nums.len()];
        result[0] = 1;
        for i in 1..nums.len() {
            result[i] = result[i - 1] * nums[i - 1];
        }
        let mut last = 1;
        for i in (0..nums.len() - 1).rev() {
            last *= nums[i + 1];
            result[i] *= last;
        }

        return result;
    }
}

fn main() {
    assert_eq!(vec![24, 12, 8, 6], Solution::product_except_self(vec![1, 2, 3, 4]));
    assert_eq!(vec![1, 0], Solution::product_except_self(vec![0, 1]));
    assert_eq!(vec![1, -1], Solution::product_except_self(vec![-1, 1]));
    assert_eq!(vec![349920000, 349920000, 349920000, 349920000, -349920000, 349920000, 69984000, 349920000, -349920000, -349920000, -349920000, 349920000, -349920000, 349920000, -116640000, 349920000, 349920000, 349920000, 349920000, 349920000, 349920000, 349920000, -349920000, 349920000, -349920000, 349920000, 349920000, 69984000, -349920000, 349920000, -349920000, 349920000, 349920000, 116640000, -349920000, -69984000, -349920000, 349920000, -349920000, 349920000, -349920000, -116640000, 349920000, 174960000, -349920000, 349920000, -349920000, 349920000, -349920000, 349920000, 349920000, 349920000, 349920000, 349920000, -349920000, -349920000, -349920000, -116640000, -349920000, -349920000, 87480000, -349920000, 349920000, -349920000, 349920000, -349920000, -349920000, -349920000, -349920000, 116640000, 349920000, 87480000, -69984000, -349920000, 349920000, 349920000, 349920000, 349920000, 349920000, -87480000, 349920000, 349920000, -116640000, -349920000, -349920000, 349920000, 116640000, -349920000, 349920000, -174960000, 349920000, -349920000, 349920000, 349920000, 349920000, -349920000, 349920000, 349920000, 349920000, -349920000], Solution::product_except_self(vec![1,1,1,1,-1,1,5,1,-1,-1,-1,1,-1,1,-3,1,1,1,1,1,1,1,-1,1,-1,1,1,5,-1,1,-1,1,1,3,-1,-5,-1,1,-1,1,-1,-3,1,2,-1,1,-1,1,-1,1,1,1,1,1,-1,-1,-1,-3,-1,-1,4,-1,1,-1,1,-1,-1,-1,-1,3,1,4,-5,-1,1,1,1,1,1,-4,1,1,-3,-1,-1,1,3,-1,1,-2,1,-1,1,1,1,-1,1,1,1,-1]));
}
